buildscript {
  dependencies {
    classpath 'org.postgresql:postgresql:42.2.24'
    classpath 'com.smartnews:jpa-entity-generator:0.99.8'
  }
}

plugins {
    id 'com.diffplug.spotless' version '6.11.0'
    id 'com.github.ben-manes.versions' version '0.42.0'
    id 'com.github.spotbugs' version '5.0.12'
    id 'com.star-zero.gradle.githook' version '1.2.1'
    id 'io.quarkus' version '2.12.2.Final'
    id 'org.flywaydb.flyway' version '9.3.1'
    id 'org.owasp.dependencycheck' version '7.2.1'
    id 'org.sonarqube' version '3.4.0.2513'
    id 'pl.allegro.tech.build.axion-release' version '1.14.1'
    id 'ru.netris.commitlint' version '1.4.1'
    id 'se.bjurr.gitchangelog.git-changelog-gradle-plugin' version '1.79.0'
    id 'checkstyle'
    id 'jacoco'
    id 'java'
    id 'pmd'
}

group = 'app'
version = scmVersion.version
apply plugin: 'entitygen'

repositories {
    mavenCentral()
}

sourceSets {
    functionalTest {
        compileClasspath += sourceSets.main.output + project.configurations.testCompileClasspath
        runtimeClasspath += sourceSets.main.output + project.configurations.testRuntimeClasspath
    }
    smokeTest {
        compileClasspath += sourceSets.main.output + project.configurations.testCompileClasspath
        runtimeClasspath += sourceSets.main.output + project.configurations.testRuntimeClasspath
    }
}

processResources {
    filesMatching("**/application.properties") {
        expand(project.properties)
    }
}

dependencies {
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.2.Final'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
    implementation enforcedPlatform('io.quarkus.platform:quarkus-bom:2.12.2.Final')
    implementation 'at.favre.lib:bcrypt:0.9.0'
    implementation 'io.jsonwebtoken:jjwt:0.9.1'
    implementation 'io.quarkus:quarkus-arc'
    implementation 'io.quarkus:quarkus-micrometer-registry-prometheus'
    implementation 'io.quarkus:quarkus-jdbc-postgresql'
    implementation 'io.quarkus:quarkus-hibernate-orm-panache'
    implementation 'io.quarkus:quarkus-hibernate-validator'
    implementation 'io.quarkus:quarkus-security'
    implementation 'io.quarkus:quarkus-smallrye-health'
    implementation 'io.quarkus:quarkus-smallrye-openapi'
    implementation 'io.quarkus:quarkus-resteasy'
    implementation 'io.quarkus:quarkus-resteasy-jackson'
    implementation 'org.jboss.logmanager:log4j2-jboss-logmanager'
    implementation 'org.mapstruct:mapstruct:1.5.2.Final'
    implementation 'org.projectlombok:lombok:1.18.24'
    testImplementation 'io.quarkus:quarkus-junit5'
    testImplementation 'io.quarkus:quarkus-junit5-mockito'
    testImplementation 'io.rest-assured:rest-assured'
    testImplementation 'org.assertj:assertj-core:3.23.1'
    testImplementation 'org.mockito:mockito-junit-jupiter:4.8.0'
    testImplementation 'org.testcontainers:testcontainers:1.17.3'
    testImplementation 'org.testcontainers:junit-jupiter:1.17.3'
	testImplementation 'org.testcontainers:postgresql:1.17.3'
    testImplementation 'net.javacrumbs.json-unit:json-unit-assertj:2.35.0'
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

githook {
    failOnMissingHooksDir = false
    hooks {
        'commit-msg' {
            task = 'commitlint'
        }
    }
}

checkstyle {
    toolVersion = '10.3.3'
    configFile = file('checkstyle.xml')
}

pmd {
    toolVersion = '6.50.0'
}

spotless {
    java {
        target 'src/**/*.java'
        importOrder()
        removeUnusedImports()
        prettier([
            'prettier': '2.7.1',
            'prettier-plugin-java': '1.6.2'
        ]).configFile('.prettierrc')
    }
}

spotbugs {
  toolVersion = '4.7.2'
}

sonarqube {
    properties {
        property 'sonar.projectKey', ''
        property 'sonar.projectName', ''
        property 'sonar.host.url', ''
        property 'sonar.login', ''
    }
}

flyway {
    url = DB_URL
    user = DB_USER
    password = DB_PASSWORD
}

entityGen {
    configPath = 'src/main/resources/db/entity-generator.yaml'
}

jacoco {
    toolVersion = '0.8.7'
}

jacocoTestReport {
    dependsOn test
    finalizedBy jacocoTestCoverageVerification
}

jacocoTestCoverageVerification {
    dependsOn test
    violationRules {
        rule {
            limit {
                minimum = 0.8
            }
        }
    }
}

check {
    dependsOn.clear()
    dependsOn 'lint', 'test'
}

test {
    finalizedBy jacocoTestReport
	useJUnitPlatform()
    testLogging {
        exceptionFormat = 'full'
    }
}

task functionalTest(type: Test) {
    description = 'Runs the functional tests.'
    group = 'Verification'
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath

    useJUnitPlatform()
    testLogging {
        exceptionFormat = 'full'
    }
}

task smokeTest(type: Test) {
    description = 'Runs the smoke tests.'
    group = 'Verification'
    testClassesDirs = sourceSets.smokeTest.output.classesDirs
    classpath = sourceSets.smokeTest.runtimeClasspath

    useJUnitPlatform()
    testLogging {
        exceptionFormat = 'full'
    }
}

task generateEntities(type: Exec) {
    description = 'Generates the entities sources.'
    group = 'Build'
    commandLine './gradlew', 'entityGen', 'format'
    environment([DB_URL: DB_URL, DB_USER: DB_USER, DB_PASSWORD: DB_PASSWORD])
    doLast {
        ant.replace(token: '\\\"', value: '') {
            fileset(dir: 'src/main/java/app/entity')
        }
    }
}

task lint() {
    dependsOn 'formatCheck', 'checkstyle', 'pmd', 'spotbugs'
    description = 'Runs several static code analysis.'
    group = 'Verification'
}

task checkstyle() {
    dependsOn 'checkstyleFunctionalTest', 'checkstyleMain', 'checkstyleSmokeTest', 'checkstyleTest'
    description = 'Runs Checkstyle analysis for the source folder.'
    group = 'Verification'
}

task pmd() {
    dependsOn 'pmdFunctionalTest', 'pmdMain', 'pmdSmokeTest', 'pmdTest'
    description = 'Runs PMD analysis for the source folder.'
    group = 'Verification'
}

task spotbugs() {
    dependsOn 'spotbugsFunctionalTest', 'spotbugsMain', 'spotbugsSmokeTest', 'spotbugsTest'
    description = 'Runs SpotBugs analysis for the source folder.'
    group = 'Verification'

    tasks.withType(com.github.spotbugs.snom.SpotBugsTask) {
        reports {
            html.enabled = true
        }
    }
}

task format() {
    dependsOn 'spotlessApply'
    description = 'Applies code formatting steps to source code in-place.'
    group = 'Verification'
}

task formatCheck() {
    dependsOn 'spotlessCheck'
    description = 'Checks that source code satisfies formatting steps.'
    group = 'Verification'
}

task generateChangelog(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
    description = 'Generates a changelog from GIT repository.'
    group = 'Release'
    fromRepo = file('.')
    file = file('CHANGELOG.md');
    templateContent = file('changelog.mustache').getText('UTF-8');
}

task buildImage(type: Exec) {
    commandLine 'docker', 'build', '-f', 'src/main/docker/Dockerfile', '-t', 'quarkus-api', '.'
    description = 'Builds a Docker image of the application.'
    group = 'Build'
}

task deploy(type: Exec) {
    commandLine 'ansible-playbook', 'cicd/deploy/deploy-to-swarm.yaml'
    description = 'Deploys the application to Docker Swarm.'
    group = 'Release'
}
